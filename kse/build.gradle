/*
  Copyright 2004 - 2013 Wayne Grant
            2013 - 2020 Kai Kramer

  This file is part of KeyStore Explorer.

  KeyStore Explorer is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  KeyStore Explorer is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with KeyStore Explorer. If not, see <http://www.gnu.org/licenses/>.
*/
import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Paths

/*
Notes:
- Task 'nsis' requires an installation of NSIS 3 and its top-level directory added to the path.
- Tasks 'signapp' and 'dmg' work only under macOS.
*/
plugins {
	id 'application'
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'nebula.ospackage' version '8.3.0'
	id 'org.beryx.runtime' version '1.8.4'
}

defaultTasks 'zip'

repositories {
	mavenCentral()
}

sourceSets {
	main.java.srcDirs = ['src']
	main.resources.srcDirs = ['src']
	main.resources.excludes = [ '**/*.java', '**/Thumbs.db' ]
	test.java.srcDirs = ['test']
	test.resources.srcDirs = ['test']
	test.resources.excludes = [ '**/*.java' ]
}

Properties props = new Properties()
props.load(project.rootProject.file('src/org/kse/version.properties').newDataInputStream())
version = props."KSE.Version"

ext {
	appName = props."KSE.Name"
	appAltName = props."KSE.AltName"
	appVersion = props."KSE.Version"
	appSimpleName = project.hasProperty('appSimpleName') ? project.getProperty('appSimpleName') : props."KSE.SimpleName"
	appSimpleVersion = props."KSE.SimpleVersion"
	appUserModelId = props."KSE.AppUserModelId"
	distFileNamePrefix = "$appSimpleName-$appSimpleVersion"
	appJarName = "${appSimpleName}.jar"
	appExe = "${appSimpleName}.exe"
	appBundle = "${appName}.app"

	// Directories
	resDir = "$projectDir/res"
	iconsDir = "$resDir/icons"
	licensesDir = "$resDir/licenses"
	readmesDir = "$resDir/readmes"
	launch4jOutDir = "$buildDir/launch4j"
	appBundleDir = "$buildDir/appBundle"
	distDir = "$buildDir/$distsDirName"
	dmgDir = "$projectDir/dmg"
	dependenciesDir = Paths.get(buildDir.toString(), "dependencies") // for NSIS we need Windows path separators

	// Icons
	kseIco = "$iconsDir/kse.ico"
	ksePng = "$iconsDir/kse.png"
	kseIcns = "$iconsDir/kse.icns"
	keystoreIcns = "$iconsDir/keystore.icns"

	// Vendor details
	copyright = "Copyright 2004 - 2013 Wayne Grant, 2013 - 2020 Kai Kramer"
	vendor = "Wayne Grant, Kai Kramer"
	website = "https://keystore-explorer.org"

	// Main class (for manifest entry)
	mainClassName = "org.kse.KSE"
}

application {
	mainClass = project.mainClassName
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.66'
	compile group: 'net.java.dev.jna', name: 'jna', version: '5.6.0'
	compile group: 'commons-io', name: 'commons-io', version: '2.7'
	compile group: 'com.miglayout', name: 'miglayout-swing', version: '5.2'
	compile group: 'com.formdev', name: 'flatlaf', version: '0.38'

	// VAqua Look & Feel not in a public repository yet
	if (file("lib/VAqua7.jar").exists()) {
		compile files('lib/VAqua7.jar')
	}

	testCompile("org.assertj:assertj-core:3.16.1")
	testCompile("org.junit.jupiter:junit-jupiter-api:5.6.2")
	testCompile("org.junit.jupiter:junit-jupiter-params:5.6.2")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.6.2")

	// To avoid compiler warnings about @API annotations in JUnit code:
	testCompileOnly('org.apiguardian:apiguardian-api:1.1.0')
}


jar {
	version = null
	manifest {
		attributes('Built-JDK': System.getProperty('java.version'),
					'Implementation-Title': project.appName,
					'Implementation-Version': project.version,
					'Implementation-Vendor': project.vendor,
					'Specification-Title': project.appName,
					'Specification-Version': project.version,
					'Specification-Vendor': project.vendor,
					'Main-Class': project.mainClassName,
					'Class-Path': configurations.compile.collect { 'lib/' + it.getName() }.join(' '),
					'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
					'SplashScreen-Image': 'org/kse/gui/images/splash.png',
					'Sealed': 'true'
					)
	}
}

task launch4j(dependsOn: jar) {
	doLast {
		ant.taskdef(name: 'launch4j', classname: 'net.sf.launch4j.ant.Launch4jTask') {
			classpath {
				fileset(dir: 'launch4j', includes: 'launch4j.jar,lib/xstream.jar' )
			}
		}
		mkdir launch4jOutDir
		ant.launch4j() {
			config(headerType: "gui",
					jarpath: appJarName,
					outfile: "$launch4jOutDir/$appExe",
					dontWrapJar: "true",
					errTitle: appName,
					stayAlive: "false",
					icon: kseIco ) {
				jre(minVersion: "1.8.0", path: "jre") {
					opt = "-Dkse.exe=true"
				}
				versionInfo(fileVersion: "$appVersion.0",
							fileDescription: appName,
							copyright: copyright,
							internalName: appSimpleName,
							originalFilename: appExe,
							productName: appName,
							productVersion: "$appVersion.0",
							txtFileVersion: appVersion,
							txtProductVersion: appVersion )
			}
		}
	}
}

task zip(type: Zip, dependsOn: launch4j) {
	version = appSimpleVersion
	into(distFileNamePrefix) {
		from jar.archivePath
		from "$launch4jOutDir/$appExe"
		from(resDir) {
			include 'kse.sh'
			fileMode 0755
		}
		from(readmesDir) {
			include 'readme.txt'
		}
	}
	into("$distFileNamePrefix/lib") {
		from configurations.runtime
	}
	into("$distFileNamePrefix/licenses") {
		from(licensesDir) {
			include '**/*.txt'
			if (!file("lib/darcula.jar").exists()) {
				exclude 'license-darcula.txt'
			}
		}
	}
	into("$distFileNamePrefix/icons") {
		from(iconsDir) {
			include '**/kse_*.png'
		}
	}
}

task copyDependencies(type: Copy) {
   from configurations.compile
   into dependenciesDir
}

task nsis(dependsOn: [launch4j, copyDependencies]) {
	doLast {
		def nsisScript = "kse.nsi"
		mkdir distDir
		copy {
			from("nsis/${nsisScript}.template")
			rename("${nsisScript}.template", nsisScript)
			filter(ReplaceTokens, beginToken: '%', endToken: '%', tokens: [
				KSE_NAME: appName,
				KSE_VERSION: appVersion,
				KSE_SIMPLE_VERSION: appSimpleVersion,
				KSE_APP_USER_MODEL_ID: appUserModelId,
				ICONS_DIR: iconsDir.toString(),
				LICENSES_DIR: licensesDir.toString(),
				JAR_DIR: libsDir.toString(),
				LIB_DIR: dependenciesDir.toString(),
				LAUNCH4J_DIR: launch4jOutDir.toString(),
				DIST_DIR: distDir.toString()
			])
			into("nsis")
		}
		exec {
			workingDir "$projectDir/nsis"
			commandLine "makensis", "/V2", nsisScript
		}
	}
}

task appbundler(dependsOn: [jar, copyDependencies]) {
	doLast {
		ant.taskdef(name: 'bundleapp', classname: 'com.oracle.appbundler.AppBundlerTask') {
			classpath {
				fileset(dir: 'lib', includes: 'appbundler-1.0ea.jar' )
			}
		}
		mkdir appBundleDir
		ant.bundleapp(outputdirectory: appBundleDir,
					name: appName,
					displayname: appName,
					executableName: appName,
					identifier: "org.kse.${appAltName}", //An identifier string that specifies the app type of the bundle. The string should be in reverse DNS format using only the Roman alphabet in upper and lower case (A�Z, a�z), the dot (�.�), and the hyphen (�-�).
					shortversion: appVersion,  // The release version number is a string composed of three period-separated integers.
					version: appVersion, // The build version number should be a string comprised of three non-negative, period-separated integers with the first integer being greater than zero�for example, 3.1.2.
					icon: kseIcns,
					mainclassname: mainClassName,
					copyright: copyright,
					applicationCategory: "public.app-category.developer-tools"
					) {
			classpath(dir: dependenciesDir)
			classpath(file: jar.archivePath)
			arch(name: "x86_64")
			bundledocument(extensions: "ks,jks,jceks,keystore,bks,uber,pfx,p12",
							icon: keystoreIcns,
							name: "KeyStore",
							role: "editor")
			option(value: "-Dkse.app=true")
			option(value: "-Dapple.laf.useScreenMenuBar=true")
			option(value: "-Dcom.apple.macos.use-file-dialog-packages=true")
			option(value: "-Dcom.apple.macos.useScreenMenuBar=true")
			option(value: "-Dcom.apple.mrj.application.apple.menu.about.name=${appName}")
			option(value: "-Dcom.apple.smallTabs=true")
			option(value: "-Dfile.encoding=UTF-8")
			//environment(name: "APP_ROOT", value: '$APP_ROOT') // provide app location for restart
		}
	}
}

task signapp(type: Exec, dependsOn: appbundler) {
	workingDir appBundleDir
	commandLine 'codesign', '--options=runtime', '-s', 'Kai Kramer', "${appBundle}"
}

task dmg(type: Exec, dependsOn: signapp) {
	workingDir appBundleDir
	mkdir distDir
	commandLine 'sh', "${dmgDir}/create-dmg.sh", "${appBundleDir}/${appBundle}", "${distDir}/${appSimpleName}-${appSimpleVersion}.dmg"
}

// common part for RPM and DEB
ospackage {
	packageName "${appSimpleName}"
	version "${appVersion}"
	//release '1'

	url "${website}"
	summary "Multipurpose keystore and certificate tool"
	packageGroup 'Security'
	packageDescription 'KeyStore Explorer is a user friendly GUI application for creating, managing and examining keystores, keys, certificates, certificate requests, certificate revocation lists and more.'
	license 'GPLv3+'
	packager ''
	vendor "${vendor}"

	os LINUX
	type BINARY

	user 'root'
	permissionGroup 'root'

	into "/opt/${packageName}"
	from(jar.outputs.files)
	from(configurations.runtime) {
		into 'lib'
	}
	from('lib') {
		into 'lib'
	}
	from(licensesDir) {
		include '**/*.txt'
		if (!file("lib/darcula.jar").exists()) {
			exclude 'license-darcula.txt'
		}
		into 'licenses'
		fileType LICENSE
	}
	from(iconsDir) {
		include '**/kse_*.png'
		into 'icons'
	}
	from(resDir) {
		include 'kse.sh'
		fileMode 0755
	}
	from(resDir) {
		include 'kse.desktop'
	}

	requires('desktop-file-utils')
	requires('hicolor-icon-theme')

	link('/usr/bin/kse', '/opt/kse/kse.sh', 0755)
	link('/usr/share/applications/kse.desktop', '/opt/kse/kse.desktop', 0644)
	for (size in [16, 32, 48, 128, 256, 512]) {
		link("/usr/share/icons/hicolor/${size}x${size}/apps/kse.png", "/opt/kse/icons/kse_${size}.png", 0644)
	}
}

buildRpm {
	release '1' // for spacewalk/satellite because they require a release field
	arch NOARCH
	requires('jre', '1.8.0', GREATER | EQUAL)
	postInstall('update-desktop-database; touch /usr/share/icons/hicolor/')
}

buildDeb {
	arch = "all"
	requires("default-jre").or("java8-runtime")
}

//task jlink(type: Exec) {
//	def javaHome = System.properties.'java.home'
//	workingDir "$buildDir"
//
//	commandLine "${javaHome}/bin/jlink",
//		'--module-path', "${javaHome}/jmods",
//		'--strip-debug', '--no-header-files', '--no-man-pages', '--include-locales=en,de,fr',
//		'--add-modules', 'java.datatransfer,java.desktop,java.logging,java.naming,java.prefs,java.scripting,jdk.localedata,jdk.charsets,jdk.crypto.ec,jdk.security.auth,jdk.crypto.cryptoki,jdk.crypto.mscapi',
//		'--output', 'jre'
//}

//jlink {
//	moduleName = 'org.kse'
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--include-locales=en,de,fr',]
//    launcher {
//        name = 'kse'
//        
//    }
//	customImage {
//        jdkModules = ['java.datatransfer', 'java.desktop,java.logging', 'java.naming,java.prefs', 'java.scripting', 'jdk.localedata', 'jdk.charsets', 'jdk.crypto.ec', 'jdk.security.auth', 'jdk.crypto.cryptoki', 'jdk.crypto.mscapi']
//    }
//    jpackage {
//        //jpackageHome = '/usr/lib/jvm/jdk14'
//        outputDir = 'jre'
//        // imageOutputDir = file("$buildDir/my-packaging-image")
//        // installerOutputDir = file("$buildDir/my-packaging-installer")
//        imageName = 'KeyStore-Explorer'
//        skipInstaller = false
//        installerName = 'kse'
//        installerType = 'msi'
//        installerOptions = ['--win-menu', '--win-shortcut', '--win-per-user-install']
//    }
//}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.datatransfer', 'java.desktop,java.logging', 'java.naming,java.prefs', 'java.scripting', 'jdk.localedata', 'jdk.charsets', 'jdk.crypto.ec', 'jdk.security.auth', 'jdk.crypto.cryptoki', 'jdk.crypto.mscapi']
    jpackage {
        jpackageHome = 'c:/Development/Java-Development/jdk-14.0.1+7'
//        outputDir = 'jre'
//        // imageOutputDir = file("$buildDir/my-packaging-image")
//        // installerOutputDir = file("$buildDir/my-packaging-installer")
        imageName = 'KeyStore-Explorer'
        skipInstaller = false
       	installerName = 'kse'
//        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'exe'
            installerOptions = ['--win-per-user-install', '--win-menu', '--win-shortcut']
//        }
    }
}
