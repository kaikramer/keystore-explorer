/*
 * Copyright 2004 - 2013 Wayne Grant
 *           2013 - 2023 Kai Kramer
 *
 * This file is part of KeyStore Explorer.
 *
 * KeyStore Explorer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * KeyStore Explorer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KeyStore Explorer.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Paths

/*
Notes:
======
- Task 'innosetup' requires an installation of InnoSetup 6 and ISCC.exe added to the PATH.
- Tasks 'signapp' and 'dmg' work only under macOS.
- Tasks 'prepareExe', 'zip' and 'innosetup' require an installation of Resource Hacker (http://www.angusj.com/resourcehacker/)
*/

plugins {
	id 'application'
	id 'java'
	id 'eclipse'
	id 'idea'
	id "com.netflix.nebula.ospackage" version "11.4.0"
}

defaultTasks 'zip'

repositories {
	mavenCentral()
}

sourceSets {
	main.java.srcDirs = ['src']
	main.resources.srcDirs = ['src']
	main.resources.excludes = [ '**/*.java', '**/Thumbs.db' ]
	test.java.srcDirs = ['test']
	test.resources.srcDirs = ['test']
	test.resources.excludes = [ '**/*.java' ]
}

Properties props = new Properties()
props.load(project.rootProject.file('src/org/kse/version.properties').newDataInputStream())
version = props."KSE.Version"

ext {
	appName = props."KSE.Name"
	appAltName = props."KSE.AltName"
	appVersion = props."KSE.Version"
	appSimpleName = project.hasProperty('appSimpleName') ? project.getProperty('appSimpleName') : props."KSE.SimpleName"
	appSimpleVersion = props."KSE.SimpleVersion"
	appUserModelId = props."KSE.AppUserModelId"
	distFileNamePrefix = "$appSimpleName-$appSimpleVersion"
	appJarName = "${appSimpleName}.jar"
	appExe = "${appSimpleName}.exe"
	appBundle = "${appName}.app"
	dmgFile = "${appSimpleName}-${appSimpleVersion}.dmg"

	// Resource Hacker for setting the version info and icon of kse.exe
	rh = "c:\\Program Files (x86)\\Resource Hacker\\ResourceHacker.exe"

	// Directories
	resDir = "$projectDir/res"
	iconsDir = "$projectDir/icons"
	licensesDir = "$projectDir/licenses"
	readmesDir = "$resDir"
	launcherOutDir = "$buildDir/launcher"
	jlinkOutDir = "$buildDir/jlink"
	appBundleDir = "$buildDir/appBundle"
	distDir = "$buildDir/${base.distsDirName}"
	dmgDir = "$projectDir/dmg"
	dependenciesDir = Paths.get(buildDir.toString(), "dependencies") // for NSIS we need Windows path separators

	// Icons
	kseIco = "$iconsDir/kse.ico"
	ksePng = "$iconsDir/kse.png"
	kseIcns = "$iconsDir/kse.icns"
	keystoreIcns = "$iconsDir/keystore.icns"

	// Vendor details
	copyright = "Copyright 2004 - 2013 Wayne Grant, 2013 - 2023 Kai Kramer"
	vendor = "Wayne Grant, Kai Kramer"
	website = "https://keystore-explorer.org"

	// Main class (for manifest entry)
	mainClassName = "org.kse.KSE"
}

application {
	mainClass = project.mainClassName
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

// always show stacktrace when build fails
gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

dependencies {
	implementation('org.bouncycastle:bcpkix-jdk18on:1.77')
	implementation('net.java.dev.jna:jna:5.13.0')
	implementation('commons-io:commons-io:2.15.1')
	implementation('com.miglayout:miglayout-swing:5.3')
	implementation('com.formdev:flatlaf:3.2')
	implementation('com.nimbusds:nimbus-jose-jwt:9.30.2')
	implementation('org.violetlib:vaqua:11')
	implementation('io.github.java-diff-utils:java-diff-utils:4.12')


	// the nashorn jar is compiled for Java 11, so for now we include it only in the dist package that comes with Java 17
	if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
		implementation('org.openjdk.nashorn:nashorn-core:15.4')
	}

	testImplementation('org.assertj:assertj-core:3.23.1')
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
	testImplementation('org.junit.jupiter:junit-jupiter-params:5.9.0')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.0')
}

test {
	useJUnitPlatform()
}

jar {
	archiveFileName = project.appJarName
	manifest {
		attributes('Built-JDK': System.getProperty('java.version'),
					'Implementation-Title': project.appName,
					'Implementation-Version': project.version,
					'Implementation-Vendor': project.vendor,
					'Specification-Title': project.appName,
					'Specification-Version': project.version,
					'Specification-Vendor': project.vendor,
					'Main-Class': project.mainClassName,
					'Class-Path': configurations.runtimeClasspath.files.collect { 'lib/' + it.getName() }.join(' '),
					'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
					'Sealed': 'true'
					)
	}
}

task prepareExe() {
	doLast {
		copy {
			from("$resDir/kse-launcher.exe")
			rename("kse-launcher.exe", "$appExe")
			into("$launcherOutDir")
		}
		def verInfo = appVersion.toString().replaceAll("\\.", ",") + ",0"
		delete "$launcherOutDir/kse.rc"
		new File(launcherOutDir, 'kse.rc') << """
			1 VERSIONINFO
			FILEVERSION     $verInfo
			PRODUCTVERSION  $verInfo
			FILEOS 			VOS__WINDOWS32
			FILETYPE 		VFT_APP
			BEGIN
			  BLOCK "StringFileInfo"
			  BEGIN
				BLOCK "040904B0"
				BEGIN
				  VALUE "FileDescription", 	"$appName"
				  VALUE "FileVersion", 		"$appVersion.0"
				  VALUE "InternalName", 	"$appSimpleName"
				  VALUE "LegalCopyright", 	"$copyright"
				  VALUE "OriginalFilename", "$appExe"
				  VALUE "ProductName", 		"$appName"
				  VALUE "ProductVersion", 	"$appVersion"
				END
			  END
			  BLOCK "VarFileInfo"
			  BEGIN
				VALUE "Translation", 0x0409, 0x04B0
			  END
			END
		"""
		exec {
			workingDir projectDir
			commandLine "${rh}",
						'-open', "${launcherOutDir}\\kse.rc",
						'-save', "${launcherOutDir}\\kse.res",
						'-action', 'compile'
		}
		exec {
			workingDir projectDir
			commandLine "${rh}",
					'-open', "${launcherOutDir}\\${appExe}",
					'-save', "${launcherOutDir}\\${appExe}",
					'-action', 'addoverwrite',
					'-mask', ' VersionInfo,,',
					'-res', "${launcherOutDir}\\kse.res"
		}
		exec {
			workingDir projectDir
			commandLine "${rh}",
					'-open', "${launcherOutDir}\\${appExe}",
					'-save', "${launcherOutDir}\\${appExe}",
					'-action', 'addoverwrite',
					'-mask', 'ICONGROUP,MAINICON,0',
					'-res', "$kseIco"
		}
	}
}

task zip(type: Zip, dependsOn: prepareExe) {
	archiveVersion.set(appSimpleVersion)
	into(distFileNamePrefix) {
		from jar.archiveFile
		from "$launcherOutDir/$appExe"
		from(resDir) {
			include 'JavaInfo.dll', 'splash*.png'
		}
		from(resDir) {
			include 'kse.sh'
			fileMode 0755
		}
		from(readmesDir) {
			include 'readme.txt'
		}
	}
	into("$distFileNamePrefix/lib") {
		from configurations.runtimeClasspath.files
	}
	into("$distFileNamePrefix/licenses") {
		from(licensesDir) {
			include '**/*.txt'
		}
	}
	into("$distFileNamePrefix/icons") {
		from(iconsDir) {
			include '**/kse_*.png'
		}
	}
}

task copyDependencies(type: Copy) {
   from configurations.runtimeClasspath.files
   into dependenciesDir
}

task jlink(type: Exec) {
	outputs.dir(jlinkOutDir)
	delete "$jlinkOutDir/jre"

	onlyIf {
		JavaVersion.current() != JavaVersion.VERSION_1_8
	}

	workingDir "$buildDir"

	def javaHome = System.properties.'java.home'
	commandLine "${javaHome}/bin/jlink",
		'--module-path', "${javaHome}/jmods",
		'--compress', '2',
		'--strip-debug',
		'--no-header-files',
		'--no-man-pages',
		'--include-locales=en,de,fr',
		'--add-modules',
					'java.base,' +
					'java.datatransfer,' +
					'java.desktop,' +
					'java.logging,' +
					'java.naming,' +
					'java.net.http,' +
					'java.prefs,' +
					'java.scripting,' +
					'jdk.localedata,' +
					'jdk.net,' +
					'jdk.charsets,' +
					'jdk.security.auth,' +
					'jdk.crypto.ec,' +
					'jdk.crypto.cryptoki,' +
					'jdk.crypto.mscapi,' +
					'jdk.zipfs,' +
					'jdk.unsupported,' +
					'jdk.dynalink',
		'--output', "$jlinkOutDir/jre"
}

task innosetup(dependsOn: [jar, prepareExe, jlink, copyDependencies]) {
	doLast {
		mkdir distDir
		copy {
			from("innosetup/setup.iss.template")
			rename("setup.iss.template", "setup.iss")
			filter(ReplaceTokens, beginToken: '%', endToken: '%', tokens: [
					KSE_VERSION: appVersion,
					KSE_APP_USER_MODEL_ID: appUserModelId,
					KSE_JAR: jar.archiveFile.get().asFile.getAbsolutePath(),
					LIB_DIR: dependenciesDir.toString(),
					LAUNCHER: "$launcherOutDir\\$appExe".toString(),
					JAVA_INFO_DLL: "$resDir\\JavaInfo.dll".toString(),
					NO_JRE: (JavaVersion.current() != JavaVersion.VERSION_1_8) ? "" : "-no-jre",
					ICONS_DIR: iconsDir.toString(),
					RES_DIR: resDir.toString(),
					JRE_DIR: "$jlinkOutDir\\jre".toString(),
					LICENSES_DIR: licensesDir.toString(),
					DIST_DIR: distDir.toString()
			])
			into("innosetup")
		}
		exec {
			workingDir "$projectDir/innosetup"
			commandLine "ISCC.exe", "setup.iss"
		}
	}
}

task appbundler(dependsOn: [jar, copyDependencies]) {
	doLast {
		ant.taskdef(name: 'bundleapp', classname: 'com.oracle.appbundler.AppBundlerTask') {
			classpath {
				fileset(dir: 'lib', includes: 'appbundler-1.0ea.jar' )
			}
		}
		mkdir appBundleDir
		ant.bundleapp(outputdirectory: appBundleDir,
					name: appName,
					displayname: appName,
					executableName: appName,
					identifier: "org.kse.${appAltName}", //An identifier string that specifies the app type of the bundle. The string should be in reverse DNS format using only the Roman alphabet in upper and lower case (A�Z, a�z), the dot (�.�), and the hyphen (�-�).
					shortversion: appVersion,  // The release version number is a string composed of three period-separated integers.
					version: appVersion, // The build version number should be a string comprised of three non-negative, period-separated integers with the first integer being greater than zero�for example, 3.1.2.
					icon: kseIcns,
					mainclassname: mainClassName,
					copyright: copyright,
					applicationCategory: "public.app-category.developer-tools"
					) {
			classpath(dir: dependenciesDir)
			classpath(file: jar.archiveFile.get().asFile.getAbsolutePath())
			arch(name: "x86_64")

			jlink(runtime: System.properties.'java.home') {
				jmod(name: "java.base")
				jmod(name: "java.datatransfer")
				jmod(name: "java.desktop")
				jmod(name: "java.logging")
				jmod(name: "java.naming")
				jmod(name: "java.net.http")
				jmod(name: "java.prefs")
				jmod(name: "java.scripting")
				jmod(name: "jdk.localedata")
				jmod(name: "jdk.net")
				jmod(name: "jdk.charsets")
				jmod(name: "jdk.crypto.ec")
				jmod(name: "jdk.security.auth")
				jmod(name: "jdk.crypto.cryptoki")
				jmod(name: "jdk.zipfs")
				jmod(name: "jdk.dynalink")
				jmod(name: "jdk.unsupported")

				argument(value: "--compress=2")
				argument(value: "--no-header-files")
				argument(value: "--no-man-pages")
				argument(value: "--strip-debug")
				argument(value: "--include-locales=en,de,fr")
			}

			bundledocument(extensions: "ks,jks,jceks,keystore,bks,uber,pfx,p12",
							icon: keystoreIcns,
							name: "KeyStore",
							role: "editor")
			option(value: "-Dapple.laf.useScreenMenuBar=true")
			option(value: "-Dcom.apple.macos.use-file-dialog-packages=true")
			option(value: "-Dcom.apple.macos.useScreenMenuBar=true")
			option(value: "-Dcom.apple.mrj.application.apple.menu.about.name=${appName}")
			option(value: "-Dcom.apple.smallTabs=true")
			option(value: "-Dfile.encoding=UTF-8")
			option(value: '-splash:$APP_ROOT/Contents/Resources/splash.png')
			option(value: "-Dkse.app=true")
			option(value: '-Dkse.app.stub=$APP_ROOT/Contents/MacOS/KeyStore Explorer') // provide app location for restart
		}
		copy {
			from("${resDir}")
			include("splash*.png")
			into("${appBundleDir}/${appName}.app/Contents/Resources")
		}
	}
}

task signapp(dependsOn: appbundler) {
	def javaBaseDirName = new File(System.properties.'java.home').getParentFile().getParentFile().getName()
	doLast {
		exec {
			workingDir appBundleDir
			commandLine 'codesign',
						'-vvv',
						'--force',
						'--options=runtime',
						'--entitlements', "${dmgDir}/entitlements.xml",
						'-s', 'Kai Kramer',
						"${appBundle}/Contents/PlugIns/${javaBaseDirName}"
		}
		exec {
			workingDir appBundleDir
			commandLine 'codesign',
						'-vvv',
						'--force',
						'--options=runtime',
						'--entitlements', "${dmgDir}/entitlements.xml",
						'-s', 'Kai Kramer',
						"${appBundle}"
		}
	}
}

task dmg(type: Exec, dependsOn: signapp) {
	mkdir distDir
	new File("${distDir}/${dmgFile}").delete()
	workingDir buildDir

	commandLine 'create-dmg', '--overwrite', "${appBundleDir}/${appBundle}", "${distDir}"

	doLast {
		file("${distDir}/${appName} ${appVersion}.dmg").renameTo(file("${distDir}/${dmgFile}"))
	}
}

task notarization(type: Exec, dependsOn: dmg) {
	workingDir buildDir

	commandLine 'xcrun',
			"notarytool",
			"submit",
			"--keychain-profile", "notarization-profile",
			"--wait",
			"${distDir}/${dmgFile}"
}

// common part for RPM and DEB
ospackage {
	packageName "${appSimpleName}"
	version "${appVersion}"
	//release '1'

	url "${website}"
	summary "Multipurpose keystore and certificate tool"
	packageGroup 'Security'
	packageDescription 'KeyStore Explorer is a user friendly GUI application for creating, managing and examining keystores, keys, certificates, certificate requests, certificate revocation lists and more.'
	license 'GPLv3+'
	packager ''
	vendor "${vendor}"

	os LINUX
	type BINARY

	user 'root'
	permissionGroup 'root'

	into "/opt/${packageName}"
	from(jar.outputs.files)
	from(configurations.runtimeClasspath.files) {
		into 'lib'
	}
	from('lib') {
		into 'lib'
	}
	from(licensesDir) {
		include '**/*.txt'
		into 'licenses'
		fileType LICENSE
	}
	from(iconsDir) {
		include '**/kse_*.png'
		into 'icons'
	}
	from(resDir) {
		include 'kse.sh'
		fileMode 0755
	}
	from(resDir) {
		include 'kse.desktop'
	}
	from(resDir) {
		include 'splash*.png'
	}

	requires('desktop-file-utils')
	requires('hicolor-icon-theme')

	link('/usr/bin/kse', '/opt/kse/kse.sh', 0755)
	link('/usr/share/applications/kse.desktop', '/opt/kse/kse.desktop', 0644)
	for (size in [16, 32, 48, 128, 256, 512]) {
		link("/usr/share/icons/hicolor/${size}x${size}/apps/kse.png", "/opt/kse/icons/kse_${size}.png", 0644)
	}
}

buildRpm {
	release '1' // for spacewalk/satellite because they require a release field
	arch NOARCH
	requires('jre', '1.8.0', GREATER | EQUAL)
	postInstall('update-desktop-database; touch /usr/share/icons/hicolor/')
}

buildDeb {
	arch = "all"
	requires("default-jre").or("java8-runtime")
}
