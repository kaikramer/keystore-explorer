/*
 * Copyright 2004 - 2013 Wayne Grant
 *           2013 - 2025 Kai Kramer
 *
 * This file is part of KeyStore Explorer.
 *
 * KeyStore Explorer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * KeyStore Explorer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KeyStore Explorer.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.codehaus.groovy.runtime.GStringImpl

import java.nio.file.Paths

/*
Notes:
======
- Task 'innosetup' requires an installation of InnoSetup 6 and ISCC.exe added to the PATH.
- Tasks 'signapp' and 'dmg' work only under macOS.
- Tasks 'prepareExe', 'zip' and 'innosetup' require an installation of Resource Hacker (http://www.angusj.com/resourcehacker/)
*/

plugins {
	id 'application'
	id 'java'
	id 'eclipse'
	id 'idea'
	id "com.netflix.nebula.ospackage" version "11.11.2"
}

defaultTasks 'zip'

repositories {
	mavenCentral()
}

Properties props = new Properties()
props.load(project.rootProject.file('src/main/resources/org/kse/version.properties').newDataInputStream())
version = props."KSE.Version"

ext {
	appName = props."KSE.Name"
	appAltName = props."KSE.AltName"
	appVersion = props."KSE.Version"
	appSimpleName = project.hasProperty('appSimpleName') ? project.getProperty('appSimpleName') : props."KSE.SimpleName"
	appSimpleVersion = props."KSE.SimpleVersion"
	appUserModelId = props."KSE.AppUserModelId"
	distFileNamePrefix = "$appSimpleName-$appSimpleVersion" as GStringImpl
	appJarName = "${appSimpleName}.jar" as GStringImpl
	appExe = "${appSimpleName}.exe" as GStringImpl
	appBundle = "${appName}.app" as GStringImpl
	if (System.getProperty("os.arch") == "aarch64") {
		dmgFile = "${appSimpleName}-${appSimpleVersion}-arm64.dmg" as GStringImpl
	} else {
		dmgFile = "${appSimpleName}-${appSimpleVersion}-x64.dmg" as GStringImpl
	}
	// Resource Hacker for setting the version info and icon of kse.exe
	rh = "c:\\Program Files (x86)\\Resource Hacker\\ResourceHacker.exe"

	// Directories
	resDir = layout.projectDirectory.dir("res").asFile.getAbsolutePath()
	iconsDir = layout.projectDirectory.dir("icons").asFile.getAbsolutePath()
	licensesDir = layout.projectDirectory.dir("licenses").asFile.getAbsolutePath()
	launcherOutDir = layout.buildDirectory.dir("launcher").get().asFile.getAbsolutePath()
	jlinkOutDir = layout.buildDirectory.dir("jlink").get().asFile.getAbsolutePath()
	appBundleDir = layout.buildDirectory.dir("appBundle").get().asFile.getAbsolutePath()
	distDir = base.distsDirectory.get().asFile.getAbsolutePath()
	dmgDir = layout.projectDirectory.dir("dmg").asFile.getAbsolutePath()
	dependenciesDir = Paths.get(layout.buildDirectory.get().asFile.getAbsolutePath(), "dependencies") // for NSIS we need Windows path separators

	// Icons
	kseIco = "$iconsDir/kse.ico" as GStringImpl
	ksePng = "$iconsDir/kse.png" as GStringImpl
	kseIcns = "$iconsDir/kse.icns" as GStringImpl
	keystoreIcns = "$iconsDir/keystore.icns" as GStringImpl

	// Vendor details
	copyright = "Copyright 2004 - 2013 Wayne Grant, 2013 - 2025 Kai Kramer"
	vendor = "Wayne Grant, Kai Kramer"
	website = "https://keystore-explorer.org"

	// Main class (for manifest entry)
	mainClassName = "org.kse.KSE"
}

application {
	mainClass = project.mainClassName
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

configurations {
	appbundler
}

dependencies {
	implementation('org.bouncycastle:bcpkix-jdk18on:1.81')
	implementation('commons-io:commons-io:2.17.0')
	implementation('com.miglayout:miglayout-swing:11.4.2')
	implementation('com.formdev:flatlaf:3.5.4:no-natives')
	implementation('com.formdev:flatlaf:3.5.4:linux-x86_64@so')
	implementation('com.formdev:flatlaf:3.5.4:macos-arm64@dylib')
	implementation('com.formdev:flatlaf:3.5.4:macos-x86_64@dylib')
	implementation('com.formdev:flatlaf:3.5.4:windows-x86_64@dll')
	implementation('com.formdev:flatlaf:3.5.4:windows-x86@dll')
	implementation('com.formdev:flatlaf:3.5.4:windows-arm64@dll')
	implementation('com.formdev:flatlaf-extras:3.5.4') {
		exclude group: 'com.formdev', module: 'flatlaf'
	}
	implementation('com.nimbusds:nimbus-jose-jwt:10.3')
	implementation('com.google.crypto.tink:tink:1.17.0') // nimbus-jose-jwt optional dep for ed25519

	// disabled because of Apple notarization failing due to unsigned native libraries in this jar
	 implementation('org.violetlib:vaqua:13')

	implementation('io.github.java-diff-utils:java-diff-utils:4.15')
	implementation('org.openjdk.nashorn:nashorn-core:15.6')
	implementation('com.fasterxml.jackson.jr:jackson-jr-objects:2.18.3')
	implementation('com.fasterxml.jackson.jr:jackson-jr-annotation-support:2.18.3')

	if (gradle.startParameter.taskNames.any { ['innosetup', 'zip'].contains(it) }) {
		implementation('org.openjfx:javafx-base:17.0.9:win')
		implementation('org.openjfx:javafx-graphics:17.0.9:win')
		implementation('org.openjfx:javafx-swing:17.0.9:win')
	}
	if (gradle.startParameter.taskNames.any { ['buildDeb', 'buildRpm', 'zip'].contains(it) }) {
		implementation('org.openjfx:javafx-swing:17.0.9:linux')
		implementation('org.openjfx:javafx-base:17.0.9:linux')
		implementation('org.openjfx:javafx-graphics:17.0.9:linux')
	}
	if (gradle.startParameter.taskNames.any { ['appbundler', 'dmg'].contains(it) }) {
		if (System.getProperty("os.arch") == "aarch64") {
			implementation('org.openjfx:javafx-base:17.0.9:mac-aarch64')
			implementation('org.openjfx:javafx-graphics:17.0.9:mac-aarch64')
			implementation('org.openjfx:javafx-swing:17.0.9:mac-aarch64')
		} else {
			implementation('org.openjfx:javafx-base:17.0.9:mac')
			implementation('org.openjfx:javafx-graphics:17.0.9:mac')
			implementation('org.openjfx:javafx-swing:17.0.9:mac')
		}

		// don't include jar in app bundle because of Apple notarization failing due to unsigned native libraries
		compileOnly('net.java.dev.jna:jna:5.17.0')
	} else {
		// currently JNA is only used for Windows, so this is fine as a temporary workaround
		implementation('net.java.dev.jna:jna:5.17.0')
	}
	if (gradle.startParameter.taskNames.any { ['zip'].contains(it) }) {
		implementation('org.openjfx:javafx-base:17.0.9:mac')
		implementation('org.openjfx:javafx-graphics:17.0.9:mac')
		implementation('org.openjfx:javafx-swing:17.0.9:mac')
	}

	appbundler('com.evolvedbinary.appbundler:appbundler:1.3.1')

	testImplementation('org.assertj:assertj-core:3.26.3')
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.10.1')
	testImplementation('org.junit.jupiter:junit-jupiter-params:5.10.1')
	testImplementation('org.skyscreamer:jsonassert:1.5.3')
	testImplementation('org.mockito:mockito-core:5.14.2')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.1')
	testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

test {
	useJUnitPlatform()
}

jar {
	archiveFileName = project.appJarName
	manifest {
		attributes('Built-JDK': System.getProperty('java.version'),
					'Implementation-Title': project.appName,
					'Implementation-Version': project.version,
					'Implementation-Vendor': project.vendor,
					'Specification-Title': project.appName,
					'Specification-Version': project.version,
					'Specification-Vendor': project.vendor,
					'Main-Class': project.mainClassName,
					'Class-Path': configurations.runtimeClasspath.files.collect { 'lib/' + it.getName() }.join(' '),
					'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
					'Sealed': 'true'
					)
	}
}

tasks.register('prepareExe') {
	doLast {
		copy {
			from("$resDir/kse-launcher.exe")
			rename("kse-launcher.exe", "$appExe")
			into("$launcherOutDir")
		}
		def verInfo = appVersion.toString().replaceAll("\\.", ",") + ",0"
		delete "$launcherOutDir/kse.rc"
		new File(launcherOutDir, 'kse.rc') << """
			1 VERSIONINFO
			FILEVERSION     $verInfo
			PRODUCTVERSION  $verInfo
			FILEOS 			VOS__WINDOWS32
			FILETYPE 		VFT_APP
			BEGIN
			  BLOCK "StringFileInfo"
			  BEGIN
				BLOCK "040904B0"
				BEGIN
				  VALUE "FileDescription", 	"$appName"
				  VALUE "FileVersion", 		"$appVersion.0"
				  VALUE "InternalName", 	"$appSimpleName"
				  VALUE "LegalCopyright", 	"$copyright"
				  VALUE "OriginalFilename", "$appExe"
				  VALUE "ProductName", 		"$appName"
				  VALUE "ProductVersion", 	"$appVersion"
				END
			  END
			  BLOCK "VarFileInfo"
			  BEGIN
				VALUE "Translation", 0x0409, 0x04B0
			  END
			END
		"""
		providers.exec { spec ->
			spec.workingDir = projectDir
			spec.commandLine = ["${rh}",
					'-open', "${launcherOutDir}\\kse.rc",
					'-save', "${launcherOutDir}\\kse.res",
					'-action', 'compile']
		}
		providers.exec { spec ->
			spec.workingDir = projectDir
			spec.commandLine = ["${rh}",
					'-open', "${launcherOutDir}\\${appExe}",
					'-save', "${launcherOutDir}\\${appExe}",
					'-action', 'addoverwrite',
					'-mask', ' VersionInfo,,',
					'-res', "${launcherOutDir}\\kse.res"]
		}
		providers.exec { spec ->
			spec.workingDir = projectDir
			spec.commandLine = ["${rh}",
					'-open', "${launcherOutDir}\\${appExe}",
					'-save', "${launcherOutDir}\\${appExe}",
					'-action', 'addoverwrite',
					'-mask', 'ICONGROUP,MAINICON,0',
					'-res', "$kseIco"]
		}
	}
}

tasks.register('zip', Zip) {
	dependsOn prepareExe
	archiveVersion.set(appSimpleVersion)
	into(distFileNamePrefix) {
		from jar.archiveFile
		from "$launcherOutDir/$appExe"
		from(resDir) {
			include 'JavaInfo.dll', 'splash*.png'
		}
		from(resDir) {
			include 'kse.sh'
			filePermissions {
				unix(0755)
			}
			include 'readme.txt'
		}
	}
	into("$distFileNamePrefix/lib") {
		from configurations.runtimeClasspath.files
	}
	into("$distFileNamePrefix/licenses") {
		from(licensesDir) {
			include '**/*.txt'
		}
	}
	into("$distFileNamePrefix/icons") {
		from(iconsDir) {
			include '**/kse_*.png'
		}
	}
}

tasks.register('copyDependencies', Copy) {
	from configurations.runtimeClasspath.files
	into dependenciesDir
}

tasks.register('jlink', Exec) {
	outputs.dir(jlinkOutDir)
	delete "$jlinkOutDir/jre"

	onlyIf {
		JavaVersion.current() != JavaVersion.VERSION_11
	}

	workingDir layout.buildDirectory

	def javaHome = System.properties.'java.home'
	commandLine "${javaHome}/bin/jlink",
			'--module-path', "${javaHome}/jmods",
			'--compress', '2',
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			'--include-locales=en,de,fr',
			'--add-modules',
			'java.base,' +
					'java.datatransfer,' +
					'java.desktop,' +
					'java.logging,' +
					'java.naming,' +
					'java.net.http,' +
					'java.prefs,' +
					'java.scripting,' +
					'jdk.accessibility,' +
					'jdk.localedata,' +
					'jdk.net,' +
					'jdk.charsets,' +
					'jdk.security.auth,' +
					'jdk.crypto.ec,' +
					'jdk.crypto.cryptoki,' +
					'jdk.crypto.mscapi,' +
					'jdk.zipfs,' +
					'jdk.unsupported,' +
					'jdk.dynalink',
			'--output', "$jlinkOutDir/jre"
}

tasks.register('innosetup') {
	dependsOn jar, prepareExe, jlink, copyDependencies
	doLast {
		mkdir distDir
		copy {
			from("innosetup/setup.iss.template")
			rename("setup.iss.template", "setup.iss")
			filter(ReplaceTokens, beginToken: '%', endToken: '%', tokens: [
					KSE_VERSION          : appVersion,
					KSE_APP_USER_MODEL_ID: appUserModelId,
					KSE_JAR              : jar.archiveFile.get().asFile.getAbsolutePath(),
					LIB_DIR              : dependenciesDir.toString(),
					LAUNCHER             : "$launcherOutDir\\$appExe".toString(),
					JAVA_INFO_DLL        : "$resDir\\JavaInfo.dll".toString(),
					NO_JRE               : (JavaVersion.current() != JavaVersion.VERSION_11) ? "" : "-no-jre",
					ICONS_DIR            : iconsDir.toString(),
					RES_DIR              : resDir.toString(),
					JRE_DIR              : "$jlinkOutDir\\jre".toString(),
					LICENSES_DIR         : licensesDir.toString(),
					DIST_DIR             : distDir.toString()
			])
			into("innosetup")
		}
		def result = providers.exec {
			workingDir "$projectDir/innosetup"
			commandLine "ISCC.exe", "setup.iss"
		}
		println "Innosetup output: ${result.standardOutput.asText.get()}"
		if (result.standardError.asText.get()) {
			println "Innosetup errors: ${result.standardError.asText.get()}"
		}
	}
}

tasks.register('appbundler') {
	dependsOn jar, copyDependencies
	doLast {
		ant.taskdef(name: 'bundleapp', classname: 'com.oracle.appbundler.AppBundlerTask', classpath: configurations.appbundler.asPath)
		mkdir appBundleDir
		ant.bundleapp(outputdirectory: appBundleDir,
				name: appName,
				displayname: appName,
				executableName: appName,
				identifier: "org.kse.${appAltName}", //An identifier string that specifies the app type of the bundle. The string should be in reverse DNS format using only the Roman alphabet in upper and lower case (A�Z, a�z), the dot (�.�), and the hyphen (�-�).
				shortversion: appVersion,  // The release version number is a string composed of three period-separated integers.
				version: appVersion, // The build version number should be a string comprised of three non-negative, period-separated integers with the first integer being greater than zero�for example, 3.1.2.
				icon: kseIcns,
				mainclassname: mainClassName,
				copyright: copyright,
				applicationCategory: "public.app-category.developer-tools"
		) {
			classpath(dir: dependenciesDir)
			classpath(file: jar.archiveFile.get().asFile.getAbsolutePath())
			arch(name: (System.getProperty("os.arch") == "aarch64") ? "arm64" : "x86_64")

			jlink(runtime: System.properties.'java.home') {
				jmod(name: "java.base")
				jmod(name: "java.datatransfer")
				jmod(name: "java.desktop")
				jmod(name: "java.logging")
				jmod(name: "java.naming")
				jmod(name: "java.net.http")
				jmod(name: "java.prefs")
				jmod(name: "java.scripting")
				jmod(name: "jdk.accessibility")
				jmod(name: "jdk.localedata")
				jmod(name: "jdk.net")
				jmod(name: "jdk.charsets")
				jmod(name: "jdk.crypto.ec")
				jmod(name: "jdk.security.auth")
				jmod(name: "jdk.crypto.cryptoki")
				jmod(name: "jdk.zipfs")
				jmod(name: "jdk.dynalink")
				jmod(name: "jdk.unsupported")

				argument(value: "--compress=2")
				argument(value: "--no-header-files")
				argument(value: "--no-man-pages")
				argument(value: "--strip-debug")
				argument(value: "--include-locales=en,de,fr,ru")
			}

			bundledocument(extensions: "ks,jks,jceks,keystore,bks,uber,pfx,p12",
					icon: keystoreIcns,
					name: "KeyStore",
					role: "editor")
			option(value: "-Dapple.laf.useScreenMenuBar=true")
			option(value: "-Dcom.apple.macos.use-file-dialog-packages=true")
			option(value: "-Dcom.apple.macos.useScreenMenuBar=true")
			option(value: "-Dcom.apple.mrj.application.apple.menu.about.name=${appName}")
			option(value: "-Dcom.apple.smallTabs=true")
			option(value: "-Dfile.encoding=UTF-8")
			option(value: '-splash:$APP_ROOT/Contents/Resources/splash.png')
			option(value: "-Dkse.app=true")
			option(value: '-Dkse.app.stub=$APP_ROOT/Contents/MacOS/KeyStore Explorer')
			// provide app location for restart
		}
		copy {
			from("${resDir}")
			include("splash*.png")
			into("${appBundleDir}/${appName}.app/Contents/Resources")
		}
	}
}

tasks.register('signapp') {
	dependsOn appbundler
	doLast {
		def javaDir = new File("${appBundleDir}/${appBundle}/Contents/Java")
		fileTree(dir: javaDir, include: 'flatlaf-*-macos-*.dylib').each { flatlafDylib ->
			println "Signing FlatLaf native library: ${flatlafDylib.absolutePath}"
			def result = providers.exec { spec ->
				spec.workingDir = appBundleDir
				spec.commandLine = ['codesign',
						'-vvv',
						'--force',
						'-s', 'Kai Kramer',
						flatlafDylib.absolutePath]
			}
			println "Codesign output: ${result.standardOutput.asText.get()}"
			if (result.standardError.asText.get()) {
				println "Codesign errors: ${result.standardError.asText.get()}"
			}
		}

		// Helper function to extract, sign, and repackage jars containing native libraries
		def processJarWithNativeLibs = { jarPattern, jarName ->
			def jarFiles = fileTree(dir: "${appBundleDir}/${appBundle}/Contents/Java", include: "**/${jarPattern}")
			if (jarFiles.isEmpty()) {
				println "No ${jarName} jar found, skipping..."
				return
			}

			def jar = jarFiles.singleFile
			def extractDir = "${appBundleDir}/${jarName}-temp"
			mkdir extractDir

			copy {
				from zipTree(jar)
				into extractDir
			}

			// Find all .dylib files in the extracted content, but not in .dSYM dirs
			def dylibFiles = fileTree(dir: extractDir, include: '**/*.dylib', exclude: '**/*.dSYM/**')
			if (dylibFiles.isEmpty()) {
				println "No native libraries found in ${jarName} jar"
			} else {
				dylibFiles.each { dylibFile ->
					println "Signing ${jarName} native library: ${dylibFile.absolutePath}"
					def result = providers.exec { spec ->
						spec.workingDir = appBundleDir
						spec.commandLine = ['codesign',
								'-vvv',
								'--force',
								'-s', 'Kai Kramer',
								"${dylibFile.absolutePath}"]
					}
					println "Codesign output: ${result.standardOutput.asText.get()}"
					if (result.standardError.asText.get()) {
						println "Codesign errors: ${result.standardError.asText.get()}"
					}
				}
			}

			// Repackage the jar with all extracted and signed files
			ant.jar(destfile: jar.absolutePath, update: true) {
				fileset(dir: extractDir) {
					include(name: '**/*')
				}
			}
			delete extractDir
		}

		// Process jars that contain native libraries
		processJarWithNativeLibs('vaqua-*.jar', 'vaqua')
		processJarWithNativeLibs('vappearances-*.jar', 'vappearances')
		processJarWithNativeLibs('jnr-*.jar', 'jnr')

		// Sign Java runtime and app bundle
		def javaBaseDirName = new File(System.properties.'java.home').getParentFile().getParentFile().getName()
		println "java.home: ${System.properties.'java.home'}"
		println "Signing Java runtime: ${appBundle}/Contents/PlugIns/${javaBaseDirName}"
		def result1 = providers.exec { spec ->
			spec.workingDir = appBundleDir
			spec.commandLine = ['codesign',
					'-vvv',
					'--force',
					'--options=runtime',
					'--entitlements', "${dmgDir}/entitlements.xml",
					'-s', 'Kai Kramer',
					"${appBundle}/Contents/PlugIns/${javaBaseDirName}"]
		}
		println "Codesign output: ${result1.standardOutput.asText.get()}"
		if (result1.standardError.asText.get()) {
			println "Codesign errors: ${result1.standardError.asText.get()}"
		}

		println "Signing app bundle: ${appBundle}"
		def result2 = providers.exec { spec ->
			spec.workingDir = appBundleDir
			spec.commandLine = ['codesign',
					'-vvv',
					'--force',
					'--options=runtime',
					'--entitlements', "${dmgDir}/entitlements.xml",
					'-s', 'Kai Kramer',
					"${appBundle}"]
		}
		println "Codesign output: ${result2.standardOutput.asText.get()}"
		if (result2.standardError.asText.get()) {
			println "Codesign errors: ${result2.standardError.asText.get()}"
		}
	}
}

tasks.register('dmg', Exec) {
	dependsOn signapp
	mkdir distDir
	new File("${distDir}/${dmgFile}").delete()
	workingDir layout.buildDirectory

	commandLine 'create-dmg', '--overwrite', "${appBundleDir}/${appBundle}", "${distDir}"

	doLast {
		file("${distDir}/${appName} ${appVersion}.dmg").renameTo(file("${distDir}/${dmgFile}"))
	}
}

tasks.register('notarization', Exec) {
	dependsOn dmg
	workingDir layout.buildDirectory

	commandLine 'xcrun',
			"notarytool",
			"submit",
			"--keychain-profile", "notarization-profile",
			"--wait",
			"${distDir}/${dmgFile}"
}

// common part for RPM and DEB
ospackage {
	packageName = "${appSimpleName}"
	version = "${appVersion}"
	//release '1'

	url = "${website}"
	summary = "Multipurpose keystore and certificate tool"
	packageGroup = 'utils'
	packageDescription = 'KeyStore Explorer is a user friendly GUI application for creating,\n' +
			'managing and examining keystores, keys, certificates, certificate requests,\n' +
			'certificate revocation lists and more.'
	license = 'GPLv3+'
	packager = ''
	vendor = "${vendor}"

	os = LINUX
	type = BINARY

	user = 'root'
	permissionGroup = 'root'

	into "/opt/${packageName}"
	from(jar.outputs.files)
	from(configurations.runtimeClasspath.files) {
		into 'lib'
	}
	from(licensesDir) {
		include '**/*.txt'
		into 'licenses'
		fileType LICENSE
		filePermissions {
			unix(0644)
		}
	}
	from(iconsDir) {
		include '**/kse_*.png'
		into 'icons'
	}
	from(resDir) {
		include 'kse.sh'
		filePermissions {
			unix(0755)
		}
	}
	from(resDir) {
		include 'kse.desktop'
	}
	from(resDir) {
		include 'splash*.png'
	}

	requires('desktop-file-utils')
	requires('hicolor-icon-theme')

	link('/usr/bin/kse', '/opt/kse/kse.sh', 0755)
	link('/usr/share/applications/kse.desktop', '/opt/kse/kse.desktop', 0644)
	for (size in [16, 32, 48, 128, 256, 512]) {
		link("/usr/share/icons/hicolor/${size}x${size}/apps/kse.png", "/opt/kse/icons/kse_${size}.png", 0644)
		fileMode = 0644
	}
}

buildRpm {
	release = '1' // for spacewalk/satellite because they require a release field
	arch = NOARCH
	requires('jre', '11', GREATER | EQUAL)
	postInstall('update-desktop-database; touch /usr/share/icons/hicolor/')
}

buildDeb {
	arch = "all"
	requires("default-jre").or("java11-runtime")
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}
