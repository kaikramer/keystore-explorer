name: Create a new KSE release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:

  launcher:
    name: Build KSE launcher
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up the required rust toolchain
        run: rustup default stable-i686-pc-windows-gnu
      - name: Build
        run: cargo build --release
        working-directory: kse-launcher
      - name: Shrink executable
        run: strip kse-launcher\target\i686-pc-windows-gnu\release\kse-launcher.exe
      - name: Store artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: kse-launcher
          path: kse-launcher\target\i686-pc-windows-gnu\release\kse-launcher.exe

  windows:
    name: Create artifacts on Windows
    needs: [launcher]
    runs-on: windows-2019
    steps:
      - name: Disable automatic EOL conversions
        run: git config --global core.autocrlf false
      - name: Install required software packages
        run: choco install reshack
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
      - uses: actions/download-artifact@v2
        with:
          name: kse-launcher
          path: kse/res
      - name: Build with Gradle
        run: .\gradlew.bat test zip innosetup
        working-directory: kse
      - name: Store artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifacts
          path: |
            kse/build/launcher/kse.exe
      - name: Store artifacts for release
        uses: actions/upload-artifact@v2
        with:
          # use second step with same artifact name in order to avoid sub-folders
          name: windows-artifacts
          path: |
            kse/build/distributions/kse-*.zip
            kse/build/distributions/kse-*-setup-no-jre.exe

  linux:
    name: Create artifacts on Linux
    runs-on: ubuntu-20.04
    steps:
      - name: Disable automatic EOL conversions
        run: git config --global core.autocrlf false
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'temurin'
      - name: Build with Gradle
        run: ./gradlew test buildDeb buildRpm
        working-directory: kse
      - name: Store artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: linux-artifacts
          path: |
            kse/build/distributions/kse*.deb
            kse/build/distributions/kse*.rpm

  windows-with-jre:
    name: Create a Windows installer with included JRE
    needs: [launcher]
    runs-on: windows-2019
    steps:
      - name: Disable automatic EOL conversions
        run: git config --global core.autocrlf false
      - name: Install required software packages
        run: choco install reshack
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/download-artifact@v2
        with:
          name: kse-launcher
          path: kse/res
      - name: Build with Gradle
        run: .\gradlew.bat test innosetup
        working-directory: kse
      - name: Store artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: windows-with-jre-artifact
          path: kse/build/distributions/kse-*-setup.exe

# DMG creation requires manual intervention, therefore not possible in GitHub action
#
#  macos:
#    name: Create artifacts on macOS
#    runs-on: macos-10.15
#    steps:
#    - name: Preparations
#      env:
#        MACOS_CERT: ${{ secrets.MACOS_CERT }}
#        MACOS_CERT_PWD: ${{ secrets.MACOS_CERT_PWD }}
#      run: |
#        echo $MACOS_CERT | base64 --decode > macos_cert.p12
#        security create-keychain -p buildchain build.chain
#        security default-keychain -s build.chain
#        security unlock-keychain -p buildchain build.chain
#        security set-keychain-settings build.chain
#        security import macos_cert.p12 -k build.chain -P $MACOS_CERT_PWD -T /usr/bin/codesign
#        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k buildchain build.chain
#        rm -f macos_cert.p12
#        # actions/setup-java@v2 removes the directories MacOS and _CodeSignature and the file Info.plist from the JDK, so we cannot use it for the application
#        wget https://github.com/adoptium/temurin16-binaries/releases/download/jdk-16.0.2%2B7/OpenJDK16U-jdk_x64_mac_hotspot_16.0.2_7.tar.gz
#        tar zxf OpenJDK16U-jdk_x64_mac_hotspot_16.0.2_7.tar.gz -C $RUNNER_TEMP
#        echo "JAVA_HOME=$RUNNER_TEMP/jdk-16.0.2+7/Contents/Home" >> $GITHUB_ENV
#        echo "$RUNNER_TEMP/jdk-16.0.2+7/Contents/Home/bin" >> $GITHUB_PATH
#    - name: Disable automatic EOL conversions
#      run: git config --global core.autocrlf false
#    - name: Checkout
#      uses: actions/checkout@v2
#    - name: Grant execute permission for gradlew
#      run: chmod +x gradlew
#      working-directory: kse
#    - name: Build with Gradle
#      run: ./gradlew signapp
#      working-directory: kse
#    - name: Store artifacts for release
#      uses: actions/upload-artifact@v2
#      with:
#        name: macos-artifact
#        path: kse/build/distributions/kse*.dmg

  release:
    needs: [windows, linux, windows-with-jre]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
      - uses: actions/download-artifact@v2
        with:
          name: linux-artifacts
      - uses: actions/download-artifact@v2
        with:
          name: windows-with-jre-artifact
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: macos-artifact
      - name: Create a release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          name: "KSE Release ${{ github.ref_name }}"
          body: "Release Notes are available here: [Release Notes](https://keystore-explorer.org/releases.html)"
          files: |
            kse-*.zip
            kse-*-setup.exe
            kse-*-setup-no-jre.exe
            kse*.deb
            kse*.rpm
          token: ${{ secrets.github_token }}
      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          update_release_body: true
          # API calls to VT are limited to 32 MB, so kse-*-setup.exe is not possible right now
          files: |
            kse.exe
            kse-*.zip
            kse-*-setup-no-jre.exe